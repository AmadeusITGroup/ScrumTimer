# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: build

on:
  workflow_dispatch:
  push:
  #  branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  semver:
    runs-on: ubuntu-latest
    outputs:
      GITVERSION_SEMVER: ${{ steps.gitversion.outputs.SemVer }}
      GITVERSION_ASSEMBLYSEMVER: "${{ steps.gitversion.outputs.AssemblySemVer }}"
      GITVERSION_MAJORMINORPATCH: "${{ steps.gitversion.outputs.MajorMinorPatch }}"
      GITVERSION_MAJOR: ${{ steps.gitversion.outputs.GITVERSION_MAJOR }}
      GITVERSION_MINOR: ${{ steps.gitversion.outputs.GITVERSION_MINOR }}
      GITVERSION_PATCH: ${{ steps.gitversion.outputs.GITVERSION_PATCH }}
      MACOS_MAJORMINORPATCH: ${{ steps.output1.outputs.MACOS_MAJORMINORPATCH }}
      DEBIAN_PKGVERSION: ${{ steps.output1.outputs.DEBIAN_PKGVERSION }}
    steps:
    - name: Checkout project
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: '5.x'
      
    - name: Determine Version
      id: gitversion
      uses: gittools/actions/gitversion/execute@v0
      
    - id: output1
      run: |
        set -x
        printenv | grep GitVersion_ | sort
        echo "GITVERSION_SEMVER=${GitVersion_SemVer}" >> "$GITHUB_OUTPUT"
        echo "GITVERSION_ASSEMBLYSEMVER=${GitVersion_AssemblySemVer}" >> "$GITHUB_OUTPUT"
        echo "GITVERSION_MAJORMINORPATCH=${GitVersion_MajorMinorPatch}" >> "$GITHUB_OUTPUT"
        echo "GITVERSION_MAJOR=${GitVersion_Major}" >> "$GITHUB_OUTPUT"
        echo "GITVERSION_MINOR=${GitVersion_Minor}" >> "$GITHUB_OUTPUT"
        echo "GITVERSION_PATCH=${GitVersion_Patch}" >> "$GITHUB_OUTPUT"
        echo "DEBIAN_PKGVERSION=${GitVersion_Major}.${GitVersion_Minor}-${GitVersion_Patch}" >> "$GITHUB_OUTPUT"
        if [ "${GitVersion_Major}" == "0" ]
        then
          echo "MACOS_MAJORMINORPATCH=1.${GitVersion_Minor}.${GitVersion_Patch}" >> "$GITHUB_OUTPUT"
        else
          echo "MACOS_MAJORMINORPATCH=${GitVersion_MajorMinorPatch}" >> "$GITHUB_OUTPUT"
        fi

  build:
    needs: [semver]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout project
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'
        server-id: ossrh
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
        gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
        gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase
    - name: Build with Maven
      run: |
        mvn versions:set "-DnewVersion=${{ needs.semver.outputs.GITVERSION_SEMVER }}"
        mvn -B package -e --file pom.xml
        
    - name: Check status
      run: |
        set
        echo -n "Current directory: "
        pwd
        find

    - uses: actions/upload-artifact@v4
      with:
        name: ScrumTimer-generic
        path: target/ScrumTimer-${{ needs.semver.outputs.GITVERSION_SEMVER }}-*.*
     
    # Now that we updated the secrets - do we need this at all?
    #- name: Import GPG key
    #  uses: crazy-max/ghaction-import-gpg@v1
    #  env:
    #     GPG_PRIVATE_KEY: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
    #     PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}

#    - name: Publish package if we are on main branch
#      if: github.ref == 'refs/heads/main'
#      env:
#        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
#        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
#        MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
#      run: |
#        mvn --batch-mode deploy

  package-linux:
    needs: [semver,build]
    runs-on: ubuntu-latest
    steps:
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Checkout project
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: scrumtimer

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ScrumTimer-generic
        path: artifacts

    - name: Check status 0
      run: |
        set
        echo -n "Current directory: "
        pwd
        find . -not -path "./oolitestarter/.git/*"
        
    - name: extract artifact
      run: |
        cd artifacts && unzip ScrumTimer-${{ needs.semver.outputs.GITVERSION_SEMVER }}-generic.zip
        
    - name: Check status 1
      run: |
        set
        echo -n "Current directory: "
        pwd
        find . -not -path "./oolitestarter/.git/*"
        
    - name: Prepare AppImage for Ubuntu
      run: |
        jpackage \
          --type app-image \
          --app-version "${{ needs.semver.outputs.DEBIAN_PKGVERSION }}" \
          --copyright Copyright \
          --description "Small timer application" \
          --name "ScrumTimer" \
          --dest target/appimage \
          --temp target/ScrumTimer-tmp \
          --vendor "Amadeus" \
          --verbose \
          --icon scrumtimer/src/main/resources-ext/scrumtimer.png \
          --input artifacts \
          --main-jar ScrumTimer-${{ needs.semver.outputs.GITVERSION_SEMVER }}.jar \
          --main-class com.amadeus.tpe.src.sca.scrumtimer.MainFrame \
          --resource-dir scrumtimer/src/jpackage/resources-linux \

    - name: Tweak AppImage
      run: |
        cp -v "scrumtimer/src/jpackage/resources-linux/ScrumTimer.desktop" "target/appimage/ScrumTimer/lib/scrumtimer-ScrumTimer.desktop"

    - name: Check status 2
      run: |
        set
        echo -n "Current directory: "
        pwd
        find . -not -path "./scrumtimer/.git/*"

    - name: Finish AppImage for Ubuntu
      run: |
        jpackage \
          --verbose \
          --app-image target/appimage/ScrumTimer \
          --name "ScrumTimer" \
          --app-version "${{ needs.semver.outputs.DEBIAN_PKGVERSION }}" \
          --dest target \
          --license-file scrumtimer/LICENSE \
          --icon scrumtimer/src/main/resources-ext/scrumtimer.png \
          --resource-dir scrumtimer/src/jpackage/resources-linux
          #--linux-shortcut \
          #--linux-menu-group Game \
          #--linux-app-category misc \

    - name: Check status 3
      run: |
        set
        echo -n "Current directory: "
        pwd
        find . -not -path "./scrumtimer/.git/*"

    - uses: actions/upload-artifact@v4
      with:
        name: ScrumTimer-Ubuntu
        path: ./target/scrumtimer*.deb

  package-windows:
    needs: [semver,build]
    runs-on: windows-latest
    steps:
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Checkout project
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: scrumtimer

    - name: Check status 1
      run: |
        get-childitem . -Recurse | where {!$_.PSIsContainer} | select-object FullName

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ScrumTimer-generic
        path: artifacts

    - name: Check status 2
      run: |
        get-childitem . -Recurse | where {!$_.PSIsContainer} | select-object FullName

    - name: extract artifact (Windows)
      run: |
        cd artifacts
        unzip ScrumTimer-${{ needs.semver.outputs.GITVERSION_SEMVER }}-generic.zip
        
    - name: Check status 3
      run: |
        get-childitem . -Recurse | where {!$_.PSIsContainer} | select-object FullName

    - name: Prepare AppImage for Windows
      run: |
        jpackage --type app-image --app-version "${{ needs.semver.outputs.GITVERSION_ASSEMBLYSEMVER }}" --copyright Copyright --description "ScrumTimer ${{ needs.semver.outputs.GITVERSION_SEMVER }}" --name "ScrumTimer" --dest target/appimage --temp target/scrumtimer-tmp --vendor "Amadeus" --verbose --icon scrumtimer/src/main/resources-ext/ScrumTimer.ico --input artifacts --main-jar ScrumTimer-${{ needs.semver.outputs.GITVERSION_SEMVER }}.jar --main-class com.amadeus.tpe.src.sca.scrumtimer.MainFrame
        # --resource-dir src/jpackage/resources

    - name: Check status 4
      run: |
        get-childitem . -Recurse | where {!$_.PSIsContainer} | select-object FullName

    # for upgrades, it seems we need a UUID - see https://stackoverflow.com/a/67442754/4222206
    - name: Finish AppImage for Windows
      run: |
        jpackage --verbose --app-image target/appimage/ScrumTimer --app-version "${{ needs.semver.outputs.GITVERSION_ASSEMBLYSEMVER }}" --name "ScrumTimer" --dest target --win-shortcut --icon scrumtimer/src/main/resources-ext/scrumtimer.ico --win-shortcut --win-menu --win-menu-group ScrumTimer --win-dir-chooser --win-upgrade-uuid 0a18c6bc-0418-47dc-9526-3a48030f6af6
        #--resource-dir src/jpackage/resources

    - name: Check status 5
      run: |
        get-childitem . -Recurse | where {!$_.PSIsContainer} | select-object FullName

    - name: Rename result (target\OoliteStarter-0.1.16.0.exe)
      run: |
        ren "target\ScrumTimer-${{ needs.semver.outputs.GITVERSION_ASSEMBLYSEMVER }}.exe" ScrumTimer-${{ needs.semver.outputs.GITVERSION_SEMVER }}-Windows.exe

    - name: Check status 6
      run: |
        get-childitem . -Recurse | where {!$_.PSIsContainer} | select-object FullName

    - uses: actions/upload-artifact@v4
      with:
        name: ScrumTimer-Windows
        path: ./target/*.exe

  package-macos:
    needs: [semver,build]
    runs-on: macos-latest

    steps:
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Checkout project
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: scrumtimer

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: ScrumTimer-generic
        path: artifacts

    - name: Check status 1
      run: |
        set
        echo -n "Current directory: "
        pwd
        find . -not -path "./scrumtimer/.git/*"

    - name: extract artifact (MacOS)
      run: |
        cd artifacts && unzip ScrumTimer-${{ needs.semver.outputs.GITVERSION_SEMVER }}-generic.zip
        
    - name: Check status 1
      run: |
        set
        echo -n "Current directory: "
        pwd
        find . -not -path "./oolitestarter/.git/*"
        
    - name: Prepare AppImage for MacOS
      run: |
        jpackage \
          --type app-image \
          --app-version "${{ needs.semver.outputs.MACOS_MAJORMINORPATCH }}" \
          --copyright Copyright \
          --description "ScrumTimer ${{ needs.semver.outputs.GITVERSION_SEMVER }}" \
          --name "ScrumTimer" --dest target/appimage \
          --temp target/scrumtimer-tmp --vendor "Amadeus" --verbose \
          --icon scrumtimer/src/main/resources-ext/scrumtimer.png \
          --input artifacts \
          --main-jar ScrumTimer-${{ needs.semver.outputs.GITVERSION_SEMVER }}.jar \
          --main-class com.amadeus.tpe.src.sca.scrumtimer.MainFrame \
          --mac-package-name "ScrumTimer" \
          --resource-dir scrumtimer/src/jpackage/resources-mac \

        # --java-options '-splash:$APPDIR/splash.png' \
        #  --mac-sign --mac-package-signing-prefix space.oolite.oolitestarter. \
        #  --mac-signing-key-user-name "HiranChaudhuri"
        # --app-version "${{ needs.semver.outputs.GITVERSION_MAJORMINORPATCH }}" \

    #- name: Tweak AppImage
    #  run: |
    #    cp -v "oolitestarter/src/main/resources/images/OoliteStarter_Splashscreen_640x360.png" "target/appimage/OoliteStarter.app/Contents/app/splash.png"

    - name: Check status 2
      run: |
        set
        echo -n "Current directory: "
        pwd
        find . -not -path "./scrumtimer/.git/*"

    - name: Finish AppImage for MacOS
      run: |
        jpackage \
          --type pkg \
          --verbose \
          --app-version "${{ needs.semver.outputs.MACOS_MAJORMINORPATCH }}" \
          --app-image target/appimage/ScrumTimer.app \
          --name "ScrumTimer" \
          --icon scrumtimer/src/main/resources-ext/scrumtimer.png \
          --dest target \
          --resource-dir scrumtimer/src/jpackage/resources-mac \
          --vendor Amadeus

    - name: Create ZIP distribution
      run: |
        cd target/appimage
        zip -r ../ScrumTimer-${{ needs.semver.outputs.GITVERSION_SEMVER }}-MacOS.zip  *

    - name: Check status 3
      run: |
        set
        echo -n "Current directory: "
        pwd
        find . -not -path "./scrumtimer/.git/*"

    - name: Rename result
      run: |
        mv ./target/ScrumTimer-${{ needs.semver.outputs.MACOS_MAJORMINORPATCH }}.pkg ./target/ScrumTimer-${{ needs.semver.outputs.GITVERSION_SEMVER }}-MacOS.pkg

    - name: Check status 4
      run: |
        set
        echo -n "Current directory: "
        pwd
        find . -not -path "./scrumtimer/.git/*"

    - uses: actions/upload-artifact@v4
      with:
        name: ScrumTimer-MacOS
        path: target/ScrumTimer*
          
  release:
    needs: [semver,build,package-linux,package-windows,package-macos]
    runs-on: ubuntu-latest

    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Check status
      run: |
        set
        echo -n "Current directory: "
        pwd
        find .

    - name: Remove old prereleases
      if: github.ref != 'refs/heads/main'
      uses: dev-drprasad/delete-older-releases@v0.3.2
      with:
        #repo: <owner>/<repoName> # defaults to current repo
        keep_latest: 6
        delete_tag_pattern: v\d+\.\d+\.\d+-.*
        delete_prerelease_only: 'true'
        #delete_branch: '${{ github.ref_name }}'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Prerelease
      if: github.ref != 'refs/heads/main'
      id: create_prerelease
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "v${{ needs.semver.outputs.GITVERSION_SEMVER }}"
        prerelease: true
        title: "ScrumTimer v${{ needs.semver.outputs.GITVERSION_SEMVER }}"
        files: |
          artifacts/ScrumTimer-generic/*.zip
          artifacts/ScrumTimer-Ubuntu/*.*
          artifacts/ScrumTimer-Windows/*.*
          artifacts/ScrumTimer-MacOS/*.*
      
    - name: Remove old releases
      if: github.ref == 'refs/heads/main'
      uses: dev-drprasad/delete-older-releases@v0.3.2
      with:
        #repo: <owner>/<repoName> # defaults to current repo
        keep_latest: 4
        delete_tag_pattern: v\d+\.\d+\.\d+
        delete_prerelease_only: 'false'
        #delete_branch: 'main'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create Release
      if: github.ref == 'refs/heads/main'
      id: create_release
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "v${{ needs.semver.outputs.GITVERSION_SEMVER }}"
        prerelease: false
        title: "ScrumTimer v${{ needs.semver.outputs.GITVERSION_SEMVER }}"
        files: |
          artifacts/ScrumTimer-generic/*.zip
          artifacts/ScrumTimer-Ubuntu/*.*
          artifacts/ScrumTimer-Windows/*.*
          artifacts/ScrumTimer-MacOS/*.*
